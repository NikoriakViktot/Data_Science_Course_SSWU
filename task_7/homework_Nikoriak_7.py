# --------------------------- Homework_7 ---------------------------------
"""
–í–∏–∫–æ–Ω–∞–≤: –í—ñ–∫—Ç–æ—Ä –ù—ñ–∫–æ—Ä—è–∫
Homework_7, –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: I
–£–º–æ–≤–∏: –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó–∏.

–ú–µ—Ç–∞:
–†–æ–∑—Ä–æ–±–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–≥—Ä–æ–≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –≤—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—ñ,
–≤–∏—Ç—Ä–∞—Ç —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–æ–±—Ä–∏–≤. –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó, heatmap —Ç–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫—É–ª—å—Ç—É—Ä–∞-—Ä–µ–≥—ñ–æ–Ω –ø–æ—î–¥–Ω–∞–Ω–Ω—è.

–û—Å–Ω–æ–≤–Ω—ñ –µ—Ç–∞–ø–∏:
1. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∞–≥—Ä–æ–¥–∞–Ω–∏—Ö (—É—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å, –≤–æ–ª–æ–≥—ñ—Å—Ç—å, –ø–æ—Å—É—Ö–∞, –¥–æ–±—Ä–∏–≤–∞, –≤–∏—Ç—Ä–∞—Ç–∏)
2. –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø–æ–±—É–¥–æ–≤–∞ SCOR, Fert_SCOR, Cost_SCOR
3. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ SCOR_total –∑ –≤–∞–≥–∞–º–∏
4. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è: —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∞, –∫—É–ª—å—Ç—É—Ä–Ω–∞, –ø–∞—Ä–∞ Region√óCrop
5. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (scatterplot, heatmap, –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–∞)
6. –ü–æ–±—É–¥–æ–≤–∞ OLAP-–∑–∞–ø–∏—Ç—ñ–≤: —Ç–æ–ø –∫—É–ª—å—Ç—É—Ä–∏, —Å–µ—Ä–µ–¥–Ω—ñ–π SCOR, –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –ø–æ—î–¥–Ω–∞–Ω–Ω—è
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import dendrogram, linkage

# === –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–Ü–Ø ===

def cluster_by_region(df, n_clusters=4):
    features = ['SCOR_norm', 'Fert_SCOR', 'Cost_SCOR']
    region_data = df.groupby("Region")[features].mean()
    scaled = StandardScaler().fit_transform(region_data)
    region_data['Cluster'] = KMeans(n_clusters=n_clusters, random_state=42).fit_predict(scaled)
    return region_data.reset_index()

def cluster_by_crop(df, n_clusters=4):
    features = ['SCOR_norm', 'Fert_SCOR', 'Cost_SCOR']
    crop_data = df.groupby("Crop_Eng")[features].mean()
    scaled = StandardScaler().fit_transform(crop_data)
    crop_data['Cluster'] = KMeans(n_clusters=n_clusters, random_state=42).fit_predict(scaled)
    return crop_data.reset_index()

def cluster_by_region_crop(df, n_clusters=4):
    features = ['SCOR_norm', 'Fert_SCOR', 'Cost_SCOR', 'SCOR_total']
    pair_data = df.groupby(['Region', 'Crop_Eng'])[features].mean().reset_index()
    scaled = StandardScaler().fit_transform(pair_data[features[:-1]])  # –Ω–µ –≤–∫–ª—é—á–∞–π SCOR_total
    pair_data['Cluster'] = KMeans(n_clusters=n_clusters, random_state=42).fit_predict(scaled)
    return pair_data

# === –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

def plot_clusters_scatter(df, x, y, group_col='Cluster', hue_col=None, title=''):
    plt.figure(figsize=(12, 6))
    if hue_col and hue_col in df.columns:
        sns.scatterplot(data=df, x=x, y=y, hue=group_col, style=hue_col, s=100)
    else:
        sns.scatterplot(data=df, x=x, y=y, hue=group_col, s=100)
    plt.title(title)
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()

def plot_hierarchical_dendrogram(df, features):
    scaled = StandardScaler().fit_transform(df[features])
    linked = linkage(scaled, method='ward')
    plt.figure(figsize=(14, 7))
    dendrogram(linked, labels=df.index.tolist(), leaf_rotation=90)
    plt.title("–Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è")
    plt.tight_layout()
    plt.show()

# === –¢–û–ü –ö–£–õ–¨–¢–£–†–ò –ü–û –ö–õ–ê–°–¢–ï–†–ê–• ===

def top_crops_by_cluster(df_clustered, top_n=3):
    print("\n –¢–æ–ø –∫—É–ª—å—Ç—É—Ä —É –∫–æ–∂–Ω–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—ñ –∑–∞ —Å–µ—Ä–µ–¥–Ω—ñ–º SCOR_total:\n")
    grouped = df_clustered.groupby(['Cluster', 'Crop_Eng'])['SCOR_total'].mean().reset_index()
    for cl in sorted(df_clustered['Cluster'].unique()):
        top = grouped[grouped['Cluster'] == cl].sort_values('SCOR_total', ascending=False).head(top_n)
        print(f"\n –ö–ª–∞—Å—Ç–µ—Ä {cl}")
        print(top[['Crop_Eng', 'SCOR_total']])

# === –ü–û–í–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–õ–ê–°–¢–ï–†–Ü–í ===

def analyze_clusters(df):
    print("\n –ê–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ Region √ó Crop:")
    clusters = cluster_by_region_crop(df)

    # –°–µ—Ä–µ–¥–Ω—ñ–π SCOR_total –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö
    avg_scor = clusters.groupby('Cluster')['SCOR_total'].mean()
    print("\n –°–µ—Ä–µ–¥–Ω—ñ–π SCOR_total –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö:")
    print(avg_scor)

    # –¢–æ–ø –∫—É–ª—å—Ç—É—Ä–∏
    top_crops_by_cluster(clusters)

    # Heatmap
    pivot = clusters.pivot(index='Region', columns='Crop_Eng', values='SCOR_total')
    plt.figure(figsize=(14, 8))
    sns.heatmap(pivot, annot=True, cmap='YlGnBu')
    plt.title("üå° Heatmap SCOR_total –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö —ñ –∫—É–ª—å—Ç—É—Ä–∞—Ö")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    # –ù–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä–∏
    worst = clusters.copy()
    worst['Low_SCOR_High_Cost'] = (worst['SCOR_total'] < 0.55) & (worst['Cost_SCOR'] > 0.2)
    bad_cases = worst[worst['Low_SCOR_High_Cost']]
    print("\n –ù–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∫—É–ª—å—Ç—É—Ä–∞-—Ä–µ–≥—ñ–æ–Ω –ø–∞—Ä–∏ (–Ω–∏–∑—å–∫–∏–π SCOR_total < 0.55, –≤–∏—Å–æ–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏ > 0.2):")
    print(bad_cases[['Region', 'Crop_Eng', 'SCOR_total', 'Cost_SCOR']])

# === SCOR_total ===

def calculate_scor_total(df, weights):
    total_weight = sum(v['weight'] for v in weights.values())
    parts = []
    for col, params in weights.items():
        w = params['weight'] / total_weight
        v = df[col]
        if not params['maximize']:
            v = 1 - v
        parts.append(w * v)
    df['SCOR_total'] = sum(parts)
    return df

# === –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ï –ú–ï–ù–Æ ===

def interactive_menu(df):
    while True:
        print("\n –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:")
        print("1 - –ö–ª–∞—Å—Ç–µ—Ä–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö")
        print("2 - –ö–ª–∞—Å—Ç–µ—Ä–∏ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞—Ö")
        print("3 - –ö–ª–∞—Å—Ç–µ—Ä–∏ –ø–æ –ø–∞—Ä–∞—Ö (Region √ó Crop)")
        print("4 - –Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è –ø–æ SCOR")
        print("5 - –ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (—Ç–æ–ø –∫—É–ª—å—Ç—É—Ä–∏, heatmap, –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ)")
        print("6 - –¢—ñ–ª—å–∫–∏ —Ç–æ–ø –∫—É–ª—å—Ç—É—Ä–∏ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É")
        print("0 - –í–∏–π—Ç–∏")

        try:
            choice = int(input("–í–∞—à –≤–∏–±—ñ—Ä: "))
        except ValueError:
            print("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!")
            continue

        if choice == 0:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
            break

        elif choice == 1:
            clusters = cluster_by_region(df)
            plot_clusters_scatter(clusters, 'SCOR_norm', 'Cost_SCOR', title='–ö–ª–∞—Å—Ç–µ—Ä–∏ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é')

        elif choice == 2:
            clusters = cluster_by_crop(df)
            plot_clusters_scatter(clusters, 'SCOR_norm', 'Cost_SCOR', title='–ö–ª–∞—Å—Ç–µ—Ä–∏ –∫—É–ª—å—Ç—É—Ä –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é')

        elif choice == 3:
            clusters = cluster_by_region_crop(df)
            plot_clusters_scatter(clusters, 'Region', 'SCOR_total', title='–ö–ª–∞—Å—Ç–µ—Ä–∏ Region √ó Crop –∑–∞ SCOR_total')

        elif choice == 4:
            pivot = df.groupby('Region')[['SCOR_norm', 'Fert_SCOR', 'Cost_SCOR']].mean()
            plot_hierarchical_dendrogram(pivot, ['SCOR_norm', 'Fert_SCOR', 'Cost_SCOR'])

        elif choice == 5:
            analyze_clusters(df)

        elif choice == 6:
            clusters = cluster_by_region_crop(df)
            top_crops_by_cluster(clusters)

        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

# === –ó–ê–ü–£–°–ö ===

if __name__ == '__main__':
    df = pd.read_csv('data/final_agro_scor_dataset.csv')

    weights = {
        'SCOR_norm': {'weight': 0.5, 'maximize': True},
        'Fert_SCOR': {'weight': 0.3, 'maximize': False},
        'Cost_SCOR': {'weight': 0.2, 'maximize': False}
    }

    df = calculate_scor_total(df, weights)
    interactive_menu(df)

# ----------------------------- –í–∏—Å–Ω–æ–≤–æ–∫ –î–æ–º–∞—à–Ω—å–æ–≥–æ –ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ7 -----------------------------

'''

–ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
1. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó —Ä–µ–≥—ñ–æ–Ω—ñ–≤:
–ö–ª–∞—Å—Ç–µ—Ä 0: —Ä–µ–≥—ñ–æ–Ω–∏ –∑ –ø–æ–º—ñ—Ä–Ω–æ—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é, –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–¥–∞–ª—å—à–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
–ö–ª–∞—Å—Ç–µ—Ä–∏ 1 —ñ 2: —Ä–µ–≥—ñ–æ–Ω–∏ –∑ –Ω–∞–π–≤–∏—â–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ SCOR, —â–æ —Å–≤—ñ–¥—á–∏—Ç—å –ø—Ä–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –π –≤–∏—Å–æ–∫—É –≤—Ä–æ–∂–∞–π–Ω—ñ—Å—Ç—å.
–ö–ª–∞—Å—Ç–µ—Ä 3: –Ω–∞–π–º–µ–Ω—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏, –∑ –≤–∏—Å–æ–∫–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏ —Ç–∞ –Ω–∏–∑—å–∫–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

2. –°–µ—Ä–µ–¥–Ω—ñ–π SCOR_total –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö (Region √ó Crop):

| –ö–ª–∞—Å—Ç–µ—Ä | –°–µ—Ä–µ–¥–Ω—ñ–π SCOR\_total |
| ------- | -------------------- |
| 1       | ‚âà 0.72               |
| 2       | ‚âà 0.71               |
| 0       | ‚âà 0.61               |
| 3       | ‚âà 0.50               |

3. –ù–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫—É–ª—å—Ç—É—Ä–∏ —É –∫–æ–∂–Ω–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—ñ:

–ö–ª–∞—Å—Ç–µ—Ä 1: Barley, Potato, Maize* ‚Äî –Ω–∞–π–∫—Ä–∞—â–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.
–ö–ª–∞—Å—Ç–µ—Ä 2: Wheat, Barley ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω–æ –≤–∏—Å–æ–∫—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
–ö–ª–∞—Å—Ç–µ—Ä 0: Wheat, Sunflower ‚Äî —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å.
–ö–ª–∞—Å—Ç–µ—Ä 3: Potato, Soybean ‚Äî —Å–ª–∞–±–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.

4. –ê–Ω–∞–ª—ñ–∑ —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏ (Heatmap):

–í–∏—Å–æ–∫—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: Khersonska oblast ‚Äì Sunflower, Volynska oblast ‚Äì Barley.
–ü—Ä–æ–±–ª–µ–º–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏: Vinnytska —Ç–∞ Khmelnytska oblast ‚Äî –¥–ª—è –≤—Å—ñ—Ö –∫—É–ª—å—Ç—É—Ä –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∏–∂—á–µ —Å–µ—Ä–µ–¥–Ω—å–æ—ó.

5. –ù–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä–∏ (–Ω–∏–∑—å–∫–∏–π SCOR < 0.55, –≤–∏—Ç—Ä–∞—Ç–∏ > 0.2):
–û—Å–æ–±–ª–∏–≤–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ:
Chernihivska ‚Äì Maize (SCOR < 0.51, –≤–∏—Ç—Ä–∞—Ç–∏ = 1.0)
Poltavska, Sumska, Vinnytska ‚Äî –º–∞—é—Ç—å –∫—ñ–ª—å–∫–∞ –∫—É–ª—å—Ç—É—Ä –∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
Kharkivska ‚Äì Sunflower, Wheat

'''